#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011-2014, Sander Pronk, Iman Pouya, Erik Lindahl, Bjorn Wesen and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import sys
import os
import math
from subprocess import Popen
import os.path
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

import cpc.dataflow
from cpc.dataflow import StringValue
from cpc.dataflow import FloatValue
from cpc.dataflow import IntValue
from cpc.dataflow import RecordValue
from cpc.dataflow import ArrayValue
from cpc.dataflow import FileValue
from cpc.lib.gromacs import cmds

class FEError(cpc.dataflow.ApplicationError):
    pass


def run(inp, out):
    cmdnames = cmds.GromacsCommands()
    pers = cpc.dataflow.Persistence(os.path.join(inp.getPersistentDir(),
                                                 "persistent.dat"))

    # TODO: make sure this works with installs with only g_rama_mpi 

    # Run once
    ramas = pers.get('ramas')

    if ramas is None or ramas < 1:

        # The confs[] input array is complete-flagged so when we get here, it should be filled in

        confs = inp.getInput('confs')
        tpr = inp.getInput('tpr')

        # Start all g_rama's in parallel
        ramaprocs = []
        FNULL = open(os.devnull, 'w') # dont generate spam from g_rama
        for i in range(len(confs)):
            subconfs = inp.getInput('confs[%d]' % i)
            for j in range(len(subconfs)):
                conf = inp.getInput('confs[%d][%d]' % (i, j))
                cmd = cmdnames.rama.split() + ['-f', conf, '-s', tpr, '-o',
                                               '0%3d_0%3d.xvg' % (i, j)]
                ramaprocs.append(Popen(cmd,
                                       stdout=FNULL, stderr=FNULL))

        # Wait for each process to complete, and set the output file correctly
        q = 0
        for i in range(len(confs)):
            subconfs = inp.getInput('confs[%d]' % i)
            for j in range(len(subconfs)):
                ramaprocs[q].communicate()
                q += 1
                xvg_i_j = os.path.join(inp.getOutputDir(), '0%3d_0%3d.xvg' % (i, j))
                out.setOut('xvgs[%d][%d]' % (i, j), FileValue(xvg_i_j))

        ramas = 1
    ramas = pers.set('ramas', ramas)

    pers.write()

# read the input data
inf=StringIO()
inf.write(sys.stdin.read())
inf.seek(0)
sys.stderr.write("\n-----> Starting\n")
inf.seek(0)
inp=cpc.dataflow.readInput(inf)

if inp.testing():
    # TODO: make it possible for sub-functions to be checked now.
    cpc.util.plugin.testCommand("g_bar -version")
    cpc.util.plugin.testCommand("grompp -version")
    cpc.util.plugin.testCommand("trjconv -version")
    cpc.util.plugin.testCommand("gmxdump -version")
    # try to import msmproject and thereby msmbuilder
    sys.exit(0)


# prepare the output data
out=inp.getFunctionOutput()

run(inp, out)

out.writeXML(sys.stdout)
#sys.stderr.write('\n')
#out.writeXML(sys.stderr)
#sys.stderr.write('\n')
sys.stderr.write("-----> Finished.\n")


