#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import sys
import os
import os.path
import shutil
import re
import traceback
import subprocess
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

import cpc.dataflow
import cpc.util
from cpc.lib.gromacs import cmds

import msmbuilder.Trajectory

def checkTrajectory(filename):
    """Check an existing trajectory and return the trajectory time in ns, 
        the delta t, and the number of frames"""
    cmdnames = cmds.GromacsCommands()
    proc=subprocess.Popen(cmdnames.gmxcheck.split() + ["-f", filename],
                          stdin=None,
                          stderr=subprocess.STDOUT,
                          stdout=subprocess.PIPE)
    ret=proc.communicate()
    step=re.compile('^Step\s*([0-9.]*)\s*([0-9.]*)', re.MULTILINE)
    if proc.returncode != 0:
        sys.stderr.write('pwd= %s\n'%os.getcwd())
        sys.stderr.write('Got: %s\n'%(unicode(ret[0], errors="ignore")))
    match=step.search(ret[0])
    frames=int(match.group(1))
    dtstring=match.group(2)
    if dtstring.strip() == "":
        sys.stderr.write("Can't extract time step from trajectory\n");
        dt=0
        raise(cpc.util.CpcError("Can't extract time step from trajectory %s\n"%
                                filename))
    else:
        dt=float(match.group(2))
    ns=(frames-1)*dt/1000.
    sys.stderr.write("Using trajectory %s with %g ns of trajectories\n"%
                     (filename, ns))
    # return the time in ns
    return (ns, dt, frames)




def convertXtc2lh5(xtcfile,  ref_conf, outFilename, persDir):
    ''' Convert the xtc-files to a .lh5 file '''

    #OutFilename='traj.nopbc.lh5'
    PDBFilename=str(ref_conf)

    # replace stdout with stderr make sure msmbuilder doesn't write to it
    ostdout=sys.stdout
    sys.stdout=sys.stderr
    #mstdout=open(os.path.join(persDir, "tohl5.out"),"w")
    #mstdout.write("Writing to %s, %s"%(xtcfile, PDBFilename))
    #log.debug("%s, %s %s %s"%(xtcfile, PDBFilename, os.path.exists(xtcfile),
    #                          os.path.exists(PDBFilename)))
    try:
        try:
            os.remove(outFilename)
        except:
            pass
        Traj = msmbuilder.Trajectory.Trajectory.LoadFromXTC([xtcfile],
                                                        PDBFilename=PDBFilename)
        Traj.Save("%s"%outFilename)
    finally:
        sys.stdout=ostdout

def removeSolAndPBC(inFile, outFile, tprFile, grpname, ndxFile, persDir):
    ''' Removes PBC on trajectories '''
    cmdnames = cmds.GromacsCommands()
    #msm1=os.path.join(persDir, 'remove_sol.txt')
    #msm2=os.path.join(persDir, 'remove_sol_err.txt')
    #mstdout=open(msm1,'w')
    #mstderr=open(msm2,'w')
    sys.stderr.write("Removing solvent and pbc:\n")
    args = cmdnames.trjconv.split()
    args += ["-f", "%s" % inFile, "-s", tprFile, "-o",
             "%s "% outFile, "-pbc", "mol"]
    if ndxFile is not None:
        args.extend( [ '-n', ndxFile ] )
    proc = subprocess.Popen(args, stdin=subprocess.PIPE,
                            stdout=sys.stderr, stderr=sys.stderr)
    sys.stderr.write("Done.\n")
    proc.communicate(grpname)
    ret = []
    #mstdout.close()
    #mstdout.close()


# convert an xtc to an lh5
def tolh5(inp, out): 
    """The function that implements converting to lh5.
       Makes two files: nopbc.xtc and nopbc.lh5."""
    #fo=inp.getFunctionOutput()
    try:
        #if inp.testing(): 
        #    cpc.util.plugin.testCommand("trjconv -version")
        #    cpc.util.plugin.testCommand("grompp -version")
        #    return True
        outFilename=os.path.join(inp.getOutputDir(), "traj.nopbc.lh5")
        nopbcXtcFilename=os.path.join(inp.getOutputDir(), "traj.nopbc.xtc")
        # we do this because it makes things easier in the msm project.
        # TODO: fix this
        xtcCopyFilename=os.path.join(inp.getOutputDir(), "traj.xtc")
        xtcFilename=inp.getInput('xtc')
        sys.stderr.write("Checking input trajectory %s\n"%xtcFilename)
        ns, dt, frames=checkTrajectory(xtcFilename)
        tprFilename=inp.getInput('tpr')
        grpname=inp.getInput('grpname')
        ndxFile=inp.getInput('ndx')
        removeSolAndPBC(xtcFilename, nopbcXtcFilename, tprFilename,
                        grpname, ndxFile, inp.getPersistentDir())
        refFilename=inp.getInput('reference')
        convertXtc2lh5(nopbcXtcFilename, refFilename, outFilename,
                       inp.getPersistentDir())
        shutil.copy(xtcFilename, xtcCopyFilename)
        # we make sure we set outputs last for if an exception occurs
        if inp.hasInput('conf'):
            out.setOut("trajectory.conf", inp.getInputValue('conf'))
        if inp.hasInput('desc'):
            out.setOut("trajectory.desc", inp.getInputValue('desc'))
        if os.path.exists(outFilename):
            out.setOut("trajectory.lh5", cpc.dataflow.FileValue(outFilename))
        if os.path.exists(nopbcXtcFilename):
            out.setOut("trajectory.xtc_nopbc", cpc.dataflow.
                      FileValue(nopbcXtcFilename))
        out.setOut("trajectory.xtc", cpc.dataflow.FileValue(xtcCopyFilename))
        out.setOut("trajectory.tpr", cpc.dataflow.FileValue(tprFilename))
        out.setOut("trajectory.dt", cpc.dataflow.FloatValue(dt))
        out.setOut("trajectory.frames", cpc.dataflow.IntValue(frames))
    except:
        # TODO: we should mark errors but for now we silently ignore
        # faulty trajectories
        fos=StringIO()
        traceback.print_exception(sys.exc_info()[0],
                                  sys.exc_info()[1],
                                  sys.exc_info()[2], file=fos)
        errmsg="Run error generating trajectory: %s\n"%(fos.getvalue())
        sys.stderr.write(errmsg)
        sys.exit(1)

# read the input data
inp=cpc.dataflow.readInput()

if inp.testing():
    cpc.util.plugin.testCommand("gmxcheck -version")
    cpc.util.plugin.testCommand("grompp -version")
    cpc.util.plugin.testCommand("trjconv -version")
    cpc.util.plugin.testCommand("gmxdump -version")
    sys.exit(0)

# prepare the output data
sys.stderr.write('basedir=%s"\n'%inp.getBaseDir())
out=inp.getFunctionOutput()
tolh5(inp, out)

out.writeXML(sys.stdout)
out.writeXML(sys.stderr)


